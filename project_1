


begin;

DROP TABLE IF EXISTS tmp_sources;
CREATE TEMP TABLE tmp_sources AS 
SELECT  order_id,
        order_created_date,
        order_completion_date,
        order_status,
        craftsman_id,
        craftsman_name,
        craftsman_address,
        craftsman_birthday,
        craftsman_email,
        product_id,
        product_name,
        product_description,
        product_type,
        product_price,
        customer_id,
        customer_name,
        customer_address,
        customer_birthday,
        customer_email 
  FROM source1.craft_market_wide
UNION
SELECT  t2.order_id,
        t2.order_created_date,
        t2.order_completion_date,
        t2.order_status,
        t1.craftsman_id,
        t1.craftsman_name,
        t1.craftsman_address,
        t1.craftsman_birthday,
        t1.craftsman_email,
        t1.product_id,
        t1.product_name,
        t1.product_description,
        t1.product_type,
        t1.product_price,
        t2.customer_id,
        t2.customer_name,
        t2.customer_address,
        t2.customer_birthday,
        t2.customer_email 
  FROM source2.craft_market_masters_products t1 
    JOIN source2.craft_market_orders_customers t2 ON t2.product_id = t1.product_id and t1.craftsman_id = t2.craftsman_id 
UNION
SELECT  t1.order_id,
        t1.order_created_date,
        t1.order_completion_date,
        t1.order_status,
        t2.craftsman_id,
        t2.craftsman_name,
        t2.craftsman_address,
        t2.craftsman_birthday,
        t2.craftsman_email,
        t1.product_id,
        t1.product_name,
        t1.product_description,
        t1.product_type,
        t1.product_price,
        t3.customer_id,
        t3.customer_name,
        t3.customer_address,
        t3.customer_birthday,
        t3.customer_email
  FROM source3.craft_market_orders t1
    JOIN source3.craft_market_craftsmans t2 ON t1.craftsman_id = t2.craftsman_id 
    JOIN source3.craft_market_customers t3 ON t1.customer_id = t3.customer_id
    
UNION
SELECT  eo.id AS order_id,
  	eo.order_created_date,
        eo.order_completion_date,
        eo.order_status,
        eo.craftsman_id,
        eo.craftsman_name,
        eo.craftsman_address,
        eo.craftsman_birthday,
        eo.craftsman_email,
        eo.product_id,
        eo.product_name,
        eo.product_description,
        eo.product_type,
        eo.product_price,
        eo.customer_id,
        ec.customer_name,
        ec.customer_address,
        ec.customer_birthday,
        ec.customer_email
FROM external_source.craft_products_orders eo
LEFT JOIN external_source.customers ec ON eo.customer_id = ec.customer_id;




MERGE INTO dwh.d_craftsman d
USING (SELECT DISTINCT craftsman_name, craftsman_address, craftsman_birthday, craftsman_email FROM tmp_sources) t
ON d.craftsman_name = t.craftsman_name AND d.craftsman_email = t.craftsman_email
WHEN MATCHED THEN
  UPDATE SET craftsman_address = t.craftsman_address, 
craftsman_birthday = t.craftsman_birthday, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (craftsman_name, craftsman_address, craftsman_birthday, craftsman_email, load_dttm)
  VALUES (t.craftsman_name, t.craftsman_address, t.craftsman_birthday, t.craftsman_email, current_timestamp);


MERGE INTO dwh.d_product d
USING (SELECT DISTINCT product_name, product_description, product_type, product_price from tmp_sources) t
ON d.product_name = t.product_name AND d.product_description = t.product_description AND d.product_price = t.product_price
WHEN MATCHED THEN
  UPDATE SET product_type= t.product_type, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (product_name, product_description, product_type, product_price, load_dttm)
  VALUES (t.product_name, t.product_description, t.product_type, t.product_price, current_timestamp);


MERGE INTO dwh.d_customer d
USING (SELECT DISTINCT customer_name, customer_address, customer_birthday, customer_email from tmp_sources) t
ON d.customer_name = t.customer_name AND d.customer_email = t.customer_email
WHEN MATCHED THEN
  UPDATE SET customer_address= t.customer_address, 
customer_birthday= t.customer_birthday, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (customer_name, customer_address, customer_birthday, customer_email, load_dttm)
  VALUES (t.customer_name, t.customer_address, t.customer_birthday, t.customer_email, current_timestamp);


DROP TABLE IF EXISTS tmp_sources_fact;
CREATE TEMP TABLE tmp_sources_fact AS 
SELECT  dp.product_id,
        dc.craftsman_id,
        dcust.customer_id,
        src.order_created_date,
        src.order_completion_date,
        src.order_status,
        current_timestamp 
FROM tmp_sources src
JOIN dwh.d_craftsman dc ON dc.craftsman_name = src.craftsman_name and dc.craftsman_email = src.craftsman_email 
JOIN dwh.d_customer dcust ON dcust.customer_name = src.customer_name and dcust.customer_email = src.customer_email 
JOIN dwh.d_product dp ON dp.product_name = src.product_name and dp.product_description = src.product_description and dp.product_price = src.product_price;


MERGE INTO dwh.f_order f
USING tmp_sources_fact t
ON f.product_id = t.product_id AND f.craftsman_id = t.craftsman_id AND f.customer_id = t.customer_id AND f.order_created_date = t.order_created_date 
WHEN MATCHED THEN
  UPDATE SET order_completion_date = t.order_completion_date, order_status = t.order_status, load_dttm = current_timestamp
WHEN NOT MATCHED THEN
  INSERT (product_id, craftsman_id, customer_id, order_created_date, order_completion_date, order_status, load_dttm)
  VALUES (t.product_id, t.craftsman_id, t.customer_id, t.order_created_date, t.order_completion_date, t.order_status, current_timestamp);
  
 end ;
 

begin;

-- странненькие данные у вас по заказам, где 1 заказ = 1 товар, не встречал такого в реальных таблицах

DROP TABLE IF EXISTS dwh.customer_report_datamart;

CREATE TABLE IF NOT EXISTS dwh.customer_report_datamart (
    id BIGINT GENERATED ALWAYS AS IDENTITY NOT NULL, 
    customer_id BIGINT NOT NULL, 
    customer_name VARCHAR NOT NULL, 
    customer_address VARCHAR NOT NULL,
    customer_birthday DATE NOT NULL,
    customer_email VARCHAR NOT NULL,
    total_spent NUMERIC(15,2) NOT NULL,
    platform_earnings NUMERIC(15,2) NOT NULL,
    order_count BIGINT NOT NULL,
    avg_order_value NUMERIC(10,2) NOT NULL,
    median_order_completion_time NUMERIC(10,1),
    top_product_category VARCHAR NOT NULL,
    favorite_craftsman_id BIGINT, 
    orders_created_count BIGINT NOT NULL,
    orders_in_progress_count BIGINT NOT NULL,
    orders_in_delivery_count BIGINT NOT NULL,
    orders_completed_count BIGINT NOT NULL,
    orders_not_completed_count BIGINT NOT NULL,
    report_period VARCHAR NOT NULL,
    CONSTRAINT customer_report_datamart_pk PRIMARY KEY (id)
);


DROP TABLE IF EXISTS dwh.load_dates_customer_report_datamart;

CREATE TABLE IF NOT EXISTS dwh.load_dates_customer_report_datamart (
    id BIGINT GENERATED ALWAYS AS IDENTITY NOT NULL,
    load_dttm DATE NOT NULL,
    CONSTRAINT load_dates_customer_report_datamart_pk PRIMARY KEY (id)
);

WITH
dwh_delta AS (
SELECT     
            dcs.customer_id AS customer_id,
            dcs.customer_name AS customer_name,
            dcs.customer_address AS customer_address,
            dcs.customer_birthday AS customer_birthday,
            dcs.customer_email AS customer_email,
            fo.order_id AS order_id,
            dc.craftsman_id as craftsman_id,
            dp.product_id AS product_id,
            dp.product_price AS product_price,
            dp.product_type AS product_type,
            fo.order_completion_date - fo.order_created_date AS diff_order_date, 
            fo.order_status AS order_status,
            TO_CHAR(fo.order_created_date, 'yyyy-mm') AS report_period,
            crd.customer_id AS exist_customer_id,
            dc.load_dttm AS craftsman_load_dttm,
            dcs.load_dttm AS customers_load_dttm,
            dp.load_dttm AS products_load_dttm
            FROM dwh.f_order fo 
                INNER JOIN dwh.d_craftsman dc ON fo.craftsman_id = dc.craftsman_id 
                INNER JOIN dwh.d_customer dcs ON fo.customer_id = dcs.customer_id 
                INNER JOIN dwh.d_product dp ON fo.product_id = dp.product_id 
                LEFT JOIN dwh.customer_report_datamart crd ON dcs.customer_id = crd.customer_id
                    WHERE (fo.load_dttm > (SELECT COALESCE(MAX(load_dttm),'1900-01-01') FROM dwh.load_dates_customer_report_datamart)) OR
                            (dc.load_dttm > (SELECT COALESCE(MAX(load_dttm),'1900-01-01') FROM dwh.load_dates_customer_report_datamart)) OR
                            (dcs.load_dttm > (SELECT COALESCE(MAX(load_dttm),'1900-01-01') FROM dwh.load_dates_customer_report_datamart)) OR
                            (dp.load_dttm > (SELECT COALESCE(MAX(load_dttm),'1900-01-01') FROM dwh.load_dates_customer_report_datamart))
			
),
dwh_update_delta AS ( 
    SELECT     
            dd.exist_customer_id AS customer_id
            FROM dwh_delta dd 
                WHERE dd.exist_customer_id IS NOT NULL        
),
dwh_delta_insert_result AS ( 
    SELECT  
        T4.customer_id AS customer_id,
        T4.customer_name AS customer_name,
        T4.customer_address AS customer_address,
        T4.customer_birthday AS customer_birthday,
        T4.customer_email AS customer_email,
        T4.total_spent AS total_spent,
        T4.platform_earnings AS platform_earnings,
        T4.order_count AS order_count,
        T4.avg_order_value AS avg_order_value,
        T4.craftsman_id as favorite_craftsman_id,                
        T4.product_type AS top_product_category,
        T4.median_order_completion_time AS median_order_completion_time,
        T4.orders_created_count AS orders_created_count,
        T4.orders_in_progress_count AS orders_in_progress_count,
        T4.orders_in_delivery_count AS orders_in_delivery_count,
        T4.orders_completed_count AS orders_completed_count,
        T4.orders_not_completed_count AS orders_not_completed_count,
        T4.report_period_1 AS report_period 
    FROM (
        SELECT
            *,
            RANK() OVER(PARTITION BY T2.customer_id, T2.report_period_1 ORDER BY count_product DESC) AS rank_count_product,
            DENSE_RANK() OVER(PARTITION BY T2.customer_id, T2.report_period_1 ORDER BY orders_qtt DESC) AS rank_count_craftsmen
        FROM 
            (
                SELECT 
                    T1.customer_id AS customer_id,
                    T1.customer_name AS customer_name,
                    T1.customer_address AS customer_address,
                    T1.customer_birthday AS customer_birthday,
                    T1.customer_email AS customer_email,
                    SUM(T1.product_price) as total_spent,
                    SUM(T1.product_price) * 0.1 AS platform_earnings,                               
                    COUNT(DISTINCT T1.order_id) AS order_count,   
                    SUM(T1.product_price) / COUNT(DISTINCT T1.order_id) AS avg_order_value,                                                              
                    PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY T1.diff_order_date) AS median_order_completion_time,
                    SUM(CASE WHEN T1.order_status = 'created' THEN 1 ELSE 0 END) AS orders_created_count,
                    SUM(CASE WHEN T1.order_status = 'in progress' THEN 1 ELSE 0 END) AS orders_in_progress_count, 
                    SUM(CASE WHEN T1.order_status = 'delivery' THEN 1 ELSE 0 END) AS orders_in_delivery_count, 
                    SUM(CASE WHEN T1.order_status = 'done' THEN 1 ELSE 0 END) AS orders_completed_count, 
                    SUM(CASE WHEN T1.order_status != 'done' THEN 1 ELSE 0 END) AS orders_not_completed_count,
                    T1.report_period AS report_period_1
                FROM dwh_delta AS T1
                WHERE T1.exist_customer_id IS NULL
                GROUP BY T1.customer_id, T1.customer_name, T1.customer_address, T1.customer_birthday, T1.customer_email, T1.report_period
            ) AS T2 
            INNER JOIN 
                (
                    SELECT
                        dd.customer_id AS customer_id_for_product_type, 
                        dd.product_type, 
                        dd.report_period as report_period_2,
                        COUNT(dd.product_id) AS count_product
                    FROM dwh_delta AS dd
                    GROUP BY dd.customer_id, dd.product_type, dd.report_period
                    ORDER BY count_product DESC
                ) AS T3 ON T2.customer_id = T3.customer_id_for_product_type and T2.report_period_1 = T3.report_period_2
            INNER JOIN
                (
                    SELECT 
                        customer_id as customer_id_for_craftsmen,
                        report_period,
                        craftsman_id,
                        count (distinct order_id) as orders_qtt
                    FROM dwh_delta 
                    GROUP BY 1,2,3
                ) AS T5 ON T2.customer_id = T5.customer_id_for_craftsmen and T2.report_period_1 = T5.report_period
            ) AS T4 WHERE T4.rank_count_product = 1 and rank_count_craftsmen = 1 ORDER BY report_period 
),


dwh_delta_update_result AS (
    SELECT 
        T4.customer_id AS customer_id,
        T4.customer_name AS customer_name,
        T4.customer_address AS customer_address,
        T4.customer_birthday AS customer_birthday,
        T4.customer_email AS customer_email,
        T4.total_spent AS total_spent,
        T4.platform_earnings AS platform_earnings,
        T4.order_count AS order_count,
        T4.avg_order_value AS avg_order_value,
        T4.craftsman_id AS favorite_craftsman_id,             
        T4.product_type AS top_product_category,
        T4.median_order_completion_time AS median_order_completion_time,
        T4.orders_created_count AS orders_created_count,
        T4.orders_in_progress_count AS orders_in_progress_count,
        T4.orders_in_delivery_count AS orders_in_delivery_count,
        T4.orders_completed_count AS orders_completed_count,
        T4.orders_not_completed_count AS orders_not_completed_count,
        T4.report_period_1 AS report_period 
    FROM (
        SELECT
            *,
            RANK() OVER(PARTITION BY T2.customer_id, T2.report_period_1 ORDER BY count_product DESC) AS rank_count_product,
            DENSE_RANK() OVER(PARTITION BY T2.customer_id, T2.report_period_1 ORDER BY orders_qtt DESC) AS rank_count_craftsmen
        FROM (
            SELECT 
                T1.customer_id AS customer_id,
                T1.customer_name AS customer_name,
                T1.customer_address AS customer_address,
                T1.customer_birthday AS customer_birthday,
                T1.customer_email AS customer_email,
                SUM(T1.product_price) AS total_spent,
                SUM(T1.product_price) * 0.1 AS platform_earnings,                               
                COUNT(DISTINCT T1.order_id) AS order_count,   
                SUM(T1.product_price) / COUNT(DISTINCT T1.order_id) AS avg_order_value,                                                              
                PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY T1.diff_order_date) AS median_order_completion_time,
                SUM(CASE WHEN T1.order_status = 'created' THEN 1 ELSE 0 END) AS orders_created_count,
                SUM(CASE WHEN T1.order_status = 'in progress' THEN 1 ELSE 0 END) AS orders_in_progress_count, 
                SUM(CASE WHEN T1.order_status = 'delivery' THEN 1 ELSE 0 END) AS orders_in_delivery_count, 
                SUM(CASE WHEN T1.order_status = 'done' THEN 1 ELSE 0 END) AS orders_completed_count, 
                SUM(CASE WHEN T1.order_status != 'done' THEN 1 ELSE 0 END) AS orders_not_completed_count,
                T1.report_period AS report_period_1
            FROM (
                SELECT 
                    dcs.customer_id AS customer_id,
                    dcs.customer_name AS customer_name,
                    dcs.customer_address AS customer_address,
                    dcs.customer_birthday AS customer_birthday,
                    dcs.customer_email AS customer_email,
                    fo.order_id AS order_id,
                    dc.craftsman_id as craftsman_id,
                    dp.product_id AS product_id,
                    dp.product_price AS product_price,
                    dp.product_type AS product_type,
                    fo.order_completion_date - fo.order_created_date AS diff_order_date, 
                    fo.order_status AS order_status,
                    TO_CHAR(fo.order_created_date, 'yyyy-mm') AS report_period,
                    dc.load_dttm AS craftsman_load_dttm,
                    dcs.load_dttm AS customers_load_dttm,
                    dp.load_dttm AS products_load_dttm
                FROM dwh.f_order fo 
                    INNER JOIN dwh.d_craftsman dc ON fo.craftsman_id = dc.craftsman_id 
                    INNER JOIN dwh.d_customer dcs ON fo.customer_id = dcs.customer_id 
                    INNER JOIN dwh.d_product dp ON fo.product_id = dp.product_id 
                    INNER JOIN dwh_update_delta ud ON fo.customer_id = ud.customer_id
            ) AS T1
            GROUP BY T1.customer_id, T1.customer_name, T1.customer_address, T1.customer_birthday, T1.customer_email, T1.report_period
        ) AS T2 
        INNER JOIN 
            (
                SELECT
                    dd.customer_id AS customer_id_for_product_type, 
                    dd.product_type, 
                    dd.report_period AS report_period_2,
                    COUNT(dd.product_id) AS count_product
                FROM dwh_delta AS dd
                GROUP BY dd.customer_id, dd.product_type, dd.report_period
                ORDER BY count_product DESC
            ) AS T3 ON T2.customer_id = T3.customer_id_for_product_type and T2.report_period_1 = T3.report_period_2
        INNER JOIN
            (
                SELECT 
                    customer_id AS customer_id_for_craftsmen,
                    report_period,
                    craftsman_id,
                    count (distinct order_id) as orders_qtt
                FROM dwh_delta 
                GROUP BY 1,2,3
            ) AS T5 ON T2.customer_id = T5.customer_id_for_craftsmen and T2.report_period_1 = T5.report_period
    ) AS T4 WHERE T4.rank_count_product = 1 and rank_count_craftsmen = 1 ORDER BY report_period 
),

	
insert_delta AS ( 
    INSERT INTO dwh.customer_report_datamart (
        customer_id,
        customer_name,
        customer_address,
        customer_birthday,
        customer_email,
        total_spent,
        platform_earnings,
        order_count,
        avg_order_value,
        favorite_craftsman_id,
        top_product_category,
        median_order_completion_time,
        orders_created_count,
        orders_in_progress_count,
        orders_in_delivery_count,
        orders_completed_count,
        orders_not_completed_count,
        report_period
    )
    SELECT 
        customer_id,
        customer_name,
        customer_address,
        customer_birthday,
        customer_email,
        total_spent,
        platform_earnings,
        order_count,
        avg_order_value,
        favorite_craftsman_id,
        top_product_category,
        median_order_completion_time,
        orders_created_count,
        orders_in_progress_count,
        orders_in_delivery_count,
        orders_completed_count,
        orders_not_completed_count,
        report_period
    FROM dwh_delta_insert_result
),

update_delta AS ( 
    UPDATE dwh.customer_report_datamart 
    SET
        customer_name = updates.customer_name,
        customer_address = updates.customer_address,
        customer_birthday = updates.customer_birthday,
        customer_email = updates.customer_email,
        total_spent = updates.total_spent,
        platform_earnings = updates.platform_earnings,
        order_count = updates.order_count,
        avg_order_value = updates.avg_order_value,
        favorite_craftsman_id = updates.favorite_craftsman_id,
        top_product_category = updates.top_product_category,
        median_order_completion_time = updates.median_order_completion_time,
        orders_created_count = updates.orders_created_count,
        orders_in_progress_count = updates.orders_in_progress_count,
        orders_in_delivery_count = updates.orders_in_delivery_count,
        orders_completed_count = updates.orders_completed_count,
        orders_not_completed_count = updates.orders_not_completed_count,
        report_period = updates.report_period
    FROM (
        SELECT 
            customer_id,
            customer_name,
            customer_address,
            customer_birthday,
            customer_email,
            total_spent,
            platform_earnings,
            order_count,
            avg_order_value,
            favorite_craftsman_id,
            top_product_category,
            median_order_completion_time,
            orders_created_count,
            orders_in_progress_count,
            orders_in_delivery_count,
            orders_completed_count,
            orders_not_completed_count,
            report_period
        FROM dwh_delta_update_result
    ) AS updates
    WHERE dwh.customer_report_datamart.customer_id = updates.customer_id
),

insert_load_date AS ( 
    INSERT INTO dwh.load_dates_customer_report_datamart (
        load_dttm
    )
    SELECT GREATEST(
        COALESCE(MAX(craftsman_load_dttm), NOW()), 
        COALESCE(MAX(customers_load_dttm), NOW()), 
        COALESCE(MAX(products_load_dttm), NOW())
    ) 
    FROM dwh_delta
)

SELECT 'increment datamart';
